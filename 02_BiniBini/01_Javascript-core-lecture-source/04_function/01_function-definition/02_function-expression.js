// [JavaScript - 함수 표현식(Function Expression)과 일급 객체 개념]

// 1. 자바스크립트의 함수는 "일급 객체(first-class object)"이다.
//    ✔ 일급 객체란?
//    - 값처럼 변수에 할당할 수 있고
//    - 인자로 전달되거나
//    - 반환값으로 사용할 수 있는 객체를 의미함.
//    => 함수도 값처럼 다룰 수 있기 때문에 변수에 할당 가능

// 2. 함수 표현식 (익명 함수 or 네이밍 함수 둘 다 가능)

// (1) 익명 함수 표현식
var hello = function(name) {
    return `\n${name}님 안녕하세요~\n`;
};

// 함수 호출
console.log(hello("김유신")); 
// 출력:
// 김유신님 안녕하세요~


// (2) 이름이 있는 함수 표현식 (네이밍 함수)
// - 함수 리터럴에 이름(add)을 붙였지만,
// - 함수가 변수(calc)에 할당되기 때문에 호출은 반드시 변수명을 사용해야 함
var calc = function add(a, b) {
    return a + b;
};

// 함수 호출은 변수명으로만 가능!
// console.log(add(1, 2)); // ❌ ReferenceError: add is not defined
console.log(`========================`);
console.log(calc(1, 2)); // ✅ 3

// ⛔ 주의: function add()의 "add"는 함수 내부에서 재귀 호출 시 사용할 수 있지만,
//         외부에서는 접근 불가능하다.


// 3. 함수 표현식 vs 함수 선언식
// ----------------------------
// 함수 선언식:
function greet(name) {
    return `${name}님 반갑습니다!`;
}
console.log(greet("이순신")); // 호출 가능

// 함수 표현식은 "호이스팅(끌어올림)" 시 정의되지 않은 상태로 올라오기 때문에,
// 선언 전에 호출하면 오류 발생!
// console.log(hello("홍길동")); // ❌ (선언 후 호출해야 함)


// [요약 정리]
// ----------------------------
// ✅ 자바스크립트의 함수는 "일급 객체"다 → 변수에 할당할 수 있다
// ✅ 함수 표현식은 변수에 익명 또는 네이밍 함수를 할당하는 방식
// ✅ 이름이 있는 함수 표현식은 외부에서 이름으로 호출할 수 없다 (변수명으로만 호출)
// ✅ 함수 표현식은 반드시 선언 이후에 호출해야 한다 (호이스팅 주의)
// ✅ 고차 함수(higher-order function): 함수를 인자로 받거나 반환하는 함수
