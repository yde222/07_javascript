// [JavaScript - 함수 호이스팅(Function Hoisting)]

// ✅ 함수 선언문 vs 함수 표현식의 차이를 이해해야 한다!

// ----------------------------------------
// 1. 함수 호출 (선언 전 위치)
console.log(hello("홍길동")); // ✅ 정상 실행됨
// 함수 선언문은 '호이스팅' 되기 때문에, 선언 전에도 호출 가능!

// console.log(hi("유관순")); // ❌ ReferenceError: Cannot access 'hi' before initialization
// hi는 변수에 할당된 함수 표현식이기 때문에, 아직 메모리에 올라가지 않았음!

// ----------------------------------------
// 2. 함수 선언문 (Function Declaration)
// - 런타임 이전에 JS 엔진이 먼저 메모리에 등록한다 (호이스팅 발생)
function hello(name) {
    return `${name}님 안녕하세요~`;
}

// ----------------------------------------
// 3. 함수 표현식 (Function Expression)
// - 변수에 함수 객체를 할당하는 방식
// - 변수 자체는 호이스팅되지만, 함수 리터럴은 런타임 시점에 할당됨
var hi = function(name) {
    return `${name}님 안녕?`;
};

// ----------------------------------------
// 4. 함수 표현식 호출 (선언 이후 위치에서만 가능)
console.log(hi("유관순")); // ✅ 정상 실행됨

/*
💡 함수 호이스팅 개념 정리

[함수 선언문]
- function hello() { ... } 처럼 정의
- 선언 자체가 런타임 전에 "호이스팅" 되어, 코드 앞에서도 호출 가능

[함수 표현식]
- var hi = function() { ... } 처럼 변수에 함수 할당
- 변수 선언만 호이스팅되고, 할당된 함수는 런타임에 생성됨
- 선언 전에 호출하면 ReferenceError 발생
*/
