// 📘 클래스 표현식 (Class Expression)
// 클래스도 변수에 저장하거나, 즉석에서 정의할 수 있음
// 함수처럼 '선언식'과 '표현식'이 있음

// ───────────────────────────────
// ✅ 1. 익명 클래스 표현식 (Anonymous Class Expression)

let Tutor = class {
    teach() {
        console.log(`이해하셨나요??`);
    }
};

new Tutor().teach(); // 출력: 이해하셨나요??

/*
📌 설명:
- `class { ... }` ← 클래스 이름이 없음 (익명)
- 이걸 `Tutor`라는 변수에 할당함
- 필요할 때 바로 `new Tutor()` 해서 인스턴스를 만들고 메서드 사용 가능

💡 왜 쓰냐면?
- React 등에서 함수 컴포넌트 대신 클래스로 컴포넌트를 만들 때
- 클래스가 1회성일 때 (이름 안 붙여도 될 때)
*/

// ───────────────────────────────
// ✅ 2. 기명 클래스 표현식 (Named Class Expression)

let Tutee = class MyTutee {
    learn() {
        console.log(`우와~~~~ 이해했습니다!!`);
    }
};

new Tutee().learn(); // 출력: 우와~~~~ 이해했습니다!!

/*
📌 설명:
- `class MyTutee` 처럼 클래스 내부에 이름을 줌 (기명)
- 외부에서는 `MyTutee` 이름을 사용할 수 없음 → 오직 클래스 내부에서만 사용됨
- 외부에서 사용할 때는 변수명(Tutee)으로 접근해야 함

💡 주로 디버깅용 이름 지정 or 재귀 클래스 정의 시 사용
*/

// ───────────────────────────────
// ✅ 3. 클래스 동적 생성 (함수 안에서 클래스 만들기)

function makeTutee(message) {
    // message는 동적으로 주는 인사말, 칭찬 등
    return class {
        feedback() {
            console.log(message);
        }
    };
}

// 함수 실행하면 클래스가 생성되고, 그걸로 인스턴스를 만들 수 있음
let SecondTutee = makeTutee("10점 만점에 10점~");
new SecondTutee().feedback(); // 출력: 10점 만점에 10점~

/*
📌 설명:
- 함수 내부에서 클래스를 만들고 리턴함 → 동적으로 클래스 생성
- 즉, 클래스 자체를 "생성"하는 함수
- 외부에서 message를 받아서 내부 메서드에서 활용 가능

💡 실제 사용처:
- 팩토리 패턴 (동적으로 클래스를 만들어내야 할 때)
- 매번 다른 기능을 가진 클래스를 만들 때 유용
*/
